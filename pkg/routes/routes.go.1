package routes

import (
	"context"
	"fmt"
	pb "jos-deployment/api/v1alpha1/pb_routes"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
)

type RoutesManageService struct {
	pb.UnimplementedRoutesManageServiceServer
}

func (s *RoutesManageService) ListRoutes(ctx context.Context, req *pb.ListRoutesRequest) (*pb.ListRoutesResponse, error) {
	namespace := req.GetNamespace()
	releaseName := req.GetReleaseName()

	// Initialize Kubernetes clientset
	config, err := rest.InClusterConfig()
	if err != nil {
		return nil, fmt.Errorf("failed to get in-cluster config: %v", err)
	}
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		return nil, fmt.Errorf("failed to create clientset: %v", err)
	}

	ingList, err := clientset.NetworkingV1().Ingresses(namespace).List(context.TODO(), metav1.ListOptions{})
	if err != nil {
		return nil, fmt.Errorf("failed to list ingresses: %v", err)
	}
	for _, ing := range ingList.Items {
		fmt.Printf("Ingress: %s, Host: %v\n", ing.Name, ing.Spec.Rules[0].Host)
	}
	return &pb.ListRoutesResponse{
		Message: "Routes listed successfully",
		Success: true,
		Routes:  nil,
	}, nil
}
