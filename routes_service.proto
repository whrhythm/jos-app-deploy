syntax = "proto3";

package apisix.v1alpha1;

import "google/api/annotations.proto";

option go_package = "./pkg/pb/;pb";

// 路由配置数据结构
message RouteConfig {
  string id = 1;                  // 路由ID
  string name = 2;               // 路由名称
  repeated string hosts = 3;     // 匹配的host列表
  repeated string uris = 4;      // 匹配的URI列表
  map<string, string> labels = 5; // 标签
  string upstream_id = 6;        // 关联的上游ID
  string plugin_config = 7;      // 插件配置(JSON格式)
  bool enable_websocket = 8;      // 是否启用WebSocket
}

// 上游服务配置
message UpstreamConfig {
  string id = 1;                  // 上游ID
  string name = 2;               // 上游名称
  string type = 3;               // 类型(roundrobin/chash)
  repeated Node nodes = 4;       // 节点列表
  map<string, string> labels = 5; // 标签
  string scheme = 6;             // 协议(http/https)
  
  message Node {
    string host = 1;             // 节点主机
    int32 port = 2;             // 节点端口
    int32 weight = 3;           // 权重
  }
}

message RouteTLS {
  string host = 1;
  string secret_name = 2;
}

// 创建路由请求
message CreateRouteRequest {
  string ing_name = 1;
  string namespace = 2;          // 命名空间
  string release_name = 3;
  bool enable_tls = 4;
  repeated RouteTLS route_tls = 5;
  repeated RouteRule rules = 6;
}

// 创建路由响应
message CreateRouteResponse {
  int32 code = 1;
  bool success = 2;              // 是否成功
  string message = 3;            // 返回消息
  string route_id = 4;           // 创建的路由ID
}

// 更新路由请求
message UpdateRouteRequest {
  string namespace = 1;          // 命名空间
  string route_id = 2;           // 要更新的路由ID
  RouteConfig route = 3;         // 新的路由配置
}

// 更新路由响应
message UpdateRouteResponse {
  bool success = 1;              // 是否成功
  string message = 2;            // 返回消息
}

// 删除路由请求
message DeleteRouteRequest {
  string namespace = 1;          // 命名空间
  string route_name = 2;           // 要删除的路由ID
}

// 删除路由响应
message DeleteRouteResponse {
  int32 code = 1;
  bool success = 2;              // 是否成功
  string message = 3;            // 返回消息
}

// 查询路由请求
message GetRouteRequest {
  string namespace = 1;          // 命名空间
  string route_id = 2;           // 要查询的路由ID
}

// 查询路由响应
message GetRouteResponse {
  bool success = 1;              // 是否成功
  string message = 2;            // 返回消息
  RouteConfig route = 3;         // 路由配置
}

message RouteBackend {
  string name = 1;
  int32 port = 2;
  string path = 3;
}

// 规则
message RouteRule {
  string host = 1;
  repeated RouteBackend paths = 2;
}

// 列出路由请求
message ListRoutesRequest {
  string namespace = 1;          // 命名空间
  string release_name = 2;
  repeated RouteRule rules = 3;
}

message ListRoutesData {
  string ing_name = 1;
  bool enable_tls = 2;
  repeated RouteTLS route_tls = 3;
  repeated RouteRule rules = 4;
}

// 列出路由响应
message ListRoutesResponse {
  int32 code = 1;
  bool success = 2;              // 是否成功
  string message = 3;            // 返回消息
  repeated ListRoutesData data = 4;
}

// 上游服务相关接口
message CreateUpstreamRequest {
  string namespace = 1;
  UpstreamConfig upstream = 2;
}

message CreateUpstreamResponse {
  bool success = 1;
  string message = 2;
  string upstream_id = 3;
}

message ListTLSRequest {
  string release_name = 1;
  string namespace = 2;
}

message TLSData {
  string name = 1;
  string dns_name = 2;
  string expired = 3;
  string source = 4;
  string crt = 5;
  string key = 6;
}

message ListTLSResponse {
  int32 code = 1;
  bool success = 2;
  string message = 3;
  repeated TLSData data = 4;
}

message CreateUPdateTLSRequest {
  string name = 1;
  string release_name = 2;
  string namespace = 3;
  string crt = 4;
  string key = 5;
}

message CreateUPdateTLSResponse {
  int32 code = 1;
  string message = 2;
}

message GetServiceListRequest {
  string namespace = 1;
  string release_name = 2;
}

message GetServiceData {
  string name = 1;
  repeated int32 ports = 2;
}

message GetServiceListResponse {
  int32 code = 1;
  bool success = 2;
  string message = 3;
  repeated GetServiceData data = 4;
}

// 删除证书
message DeleteCertsRequest {
  string namespace = 1;
  string name = 2;
}

message DeleteCertsResponse {
  int32 code = 1;
  bool success = 2;
  string message = 3;
}

message GetNodeInfoRequest{}

message GetNodeInfoData {
  string role = 1;
  string ip = 2;
}

message GetNodeInfoResponse {
  int32 code = 1;
  bool success = 2;
  string message = 3;
  GetNodeInfoData data = 4;
}

message JumpAndLoginRequest {
  string ingress_name = 1;
  string namespace = 2;
  string label = 3;
  string url = 4;
}

message JumpAndLoginResponseData {
  string url = 1;
}

message JumpAndLoginResponse {
  int32 code = 1;
  bool success = 2;
  string message = 3;
  JumpAndLoginResponseData data = 4;
}

message GetDeployListFromPodRequest {
  string name = 1;
  string namespace = 2;
}

message GetDeployListFromPodResponseData {
  string kind = 1;
  string deploy_name = 2;
  string service_name = 3;
  string namespace = 4;
}

message GetDeployListFromPodResponse {
  int32 code = 1;
  bool success = 2;
  string message = 3;
  repeated GetDeployListFromPodResponseData data = 4;
}

message GetDefaultHarborProjectRequest {}
message GetDefaultHarborProjectResponse {
  int32 code = 1;
  bool success = 2;
  string message = 3;
  repeated string data = 4;
}

message GetHarborProjectImagesRequest {
  string project_name = 1;
}

message GetHarborImage {
  string repository = 1;
  repeated string tags = 2;
}

message GetHarborProjectImagesResponse {
  int32 code = 1;
  bool success = 2;
  string message = 3;
  repeated GetHarborImage data = 4;
}

message CreateComponmentRequest {
  string name = 1;
  string image_fule_name = 2;
  GetDeployListFromPodResponseData deploy_info = 3;
}

message CreateComponmentResponse {
  int32 code = 1;
  bool success = 2;
  string message = 3;
}

message DeleteApisixRouteRequest {
  string ar_name = 1;
  string namespace = 2;
}

message DeleteApisixRouteResponse {}

message CreateApisixRouteRequest {
  string namespace = 1;
}

message CreateApisixRouteResponse {}

// 网关配置服务
service APISIXGatewayService {
  // 路由管理
  rpc CreateRoute (CreateRouteRequest) returns (CreateRouteResponse) {
    option (google.api.http) = {
      post: "/prod/v1alpha1/{namespace}/routes"
      body: "*"
    };
  }

  rpc DeleteRoute (DeleteRouteRequest) returns (DeleteRouteResponse) {
    option (google.api.http) = {
      delete: "/prod/v1alpha1/{namespace}/routes/{route_name}"
    };
  }
  
  rpc GetRoute (GetRouteRequest) returns (GetRouteResponse) {
    option (google.api.http) = {
      get: "/prod/v1alpha1/{namespace}/routes/{route_id}"
    };
  }
  
  rpc ListRoutes (ListRoutesRequest) returns (ListRoutesResponse) {
    option (google.api.http) = {
      get: "/prod/v1alpha1/{namespace}/routes/list"
    };
  }
  // apisix 相关配置
  rpc DeleteApisixRoute (DeleteApisixRouteRequest) returns (DeleteApisixRouteResponse) {
    option (google.api.http) = {
      delete: "/prod/v1alpha1/{namespace}/ar/{ar_name}"
    };
  }

  rpc CreateApisixRoute (CreateApisixRouteRequest) returns (CreateApisixRouteResponse) {
    option (google.api.http) = {
      post: "/prod/v1alpha1/{namespace}/ar/create"
      body: "*"
    };
  }

  // 上游服务管理
  rpc CreateUpstream (CreateUpstreamRequest) returns (CreateUpstreamResponse) {
    option (google.api.http) = {
      post: "/prod/v1alpha1/{namespace}/upstreams"
      body: "upstream"
    };
  }

  // 证书管理
  rpc ListCerts (ListTLSRequest) returns (ListTLSResponse) {
    option (google.api.http) = {
      get: "/prod/v1alpha1/{namespace}/certs/list"
    };
  }

  // 证书删除
  rpc DeleteCerts (DeleteCertsRequest) returns (DeleteCertsResponse) {
    option (google.api.http) = {
      delete: "/prod/v1alpha1/{namespace}/certs/{name}"
    };
  }

  rpc CreateUpdateTLS (CreateUPdateTLSRequest) returns (CreateUPdateTLSResponse) {
    option (google.api.http) = {
      post: "/prod/v1alpha1/{namespace}/certs/update"
      body: "*"
    };
  }

  // 获取service list
  rpc GetServiceList (GetServiceListRequest) returns (GetServiceListResponse) {
    option (google.api.http) = {
      get: "/prod/v1alpha1/{namespace}/service"
    };
  }

  // 获取节点IP地址
  rpc GetNodeInfo (GetNodeInfoRequest) returns (GetNodeInfoResponse) {
    option (google.api.http) = {
      get: "/prod/v1alpha1/node/info"
    };
  }

  // 调转登录，统一认证
  rpc JumpAndLogin (JumpAndLoginRequest) returns (JumpAndLoginResponse) {
    option (google.api.http) = {
      post: "/prod/v1alpha1/app/login"
    };
  }

  rpc GetDeployListFromPod(GetDeployListFromPodRequest) returns (GetDeployListFromPodResponse) {
    option (google.api.http) = {
      get: "/prod/v1alpha1/deploy/info"
    };
  }

  rpc GetDefaultHarborProject(GetDefaultHarborProjectRequest) returns (GetDefaultHarborProjectResponse) {
    option (google.api.http) = {
      get: "/prod/v1alpha1/harbor/project"
    };
  }

  rpc GetHarborProjectImages(GetHarborProjectImagesRequest) returns (GetHarborProjectImagesResponse) {
    option (google.api.http) = {
      get: "/prod/v1alpha1/harbor/images"
    };
  }

  // 创建一个额外的deployment/statefulset service
  rpc CreateComponment(CreateComponmentRequest) returns (CreateComponmentResponse) {
    option (google.api.http) = {
      post: "/prod/v1alpha1/comp/create"
    };
  }

//  rpc UpdateComponment(UpdateComponmentRequest) returns (UpdateComponmentResponse) {
//    option (google.api.http) = {
//      post: "/prod/v1alpha1/comp/update"
//    };
//  }

//  rpc DeleteComponment(DeleteComponmentRequest) returns (DeleteComponmentResponse) {
//    option (google.api.http) = {
//      delete: "/prod/v1alpha1/comp/delete"
//    };
//  }
}


