// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: routes_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	APISIXGatewayService_CreateRoute_FullMethodName             = "/apisix.v1alpha1.APISIXGatewayService/CreateRoute"
	APISIXGatewayService_DeleteRoute_FullMethodName             = "/apisix.v1alpha1.APISIXGatewayService/DeleteRoute"
	APISIXGatewayService_GetRoute_FullMethodName                = "/apisix.v1alpha1.APISIXGatewayService/GetRoute"
	APISIXGatewayService_ListRoutes_FullMethodName              = "/apisix.v1alpha1.APISIXGatewayService/ListRoutes"
	APISIXGatewayService_DeleteApisixRoute_FullMethodName       = "/apisix.v1alpha1.APISIXGatewayService/DeleteApisixRoute"
	APISIXGatewayService_CreateApisixRoute_FullMethodName       = "/apisix.v1alpha1.APISIXGatewayService/CreateApisixRoute"
	APISIXGatewayService_CreateUpstream_FullMethodName          = "/apisix.v1alpha1.APISIXGatewayService/CreateUpstream"
	APISIXGatewayService_ListCerts_FullMethodName               = "/apisix.v1alpha1.APISIXGatewayService/ListCerts"
	APISIXGatewayService_DeleteCerts_FullMethodName             = "/apisix.v1alpha1.APISIXGatewayService/DeleteCerts"
	APISIXGatewayService_CreateUpdateTLS_FullMethodName         = "/apisix.v1alpha1.APISIXGatewayService/CreateUpdateTLS"
	APISIXGatewayService_GetServiceList_FullMethodName          = "/apisix.v1alpha1.APISIXGatewayService/GetServiceList"
	APISIXGatewayService_GetNodeInfo_FullMethodName             = "/apisix.v1alpha1.APISIXGatewayService/GetNodeInfo"
	APISIXGatewayService_JumpAndLogin_FullMethodName            = "/apisix.v1alpha1.APISIXGatewayService/JumpAndLogin"
	APISIXGatewayService_GetDeployListFromPod_FullMethodName    = "/apisix.v1alpha1.APISIXGatewayService/GetDeployListFromPod"
	APISIXGatewayService_GetDefaultHarborProject_FullMethodName = "/apisix.v1alpha1.APISIXGatewayService/GetDefaultHarborProject"
	APISIXGatewayService_GetHarborProjectImages_FullMethodName  = "/apisix.v1alpha1.APISIXGatewayService/GetHarborProjectImages"
	APISIXGatewayService_CreateComponment_FullMethodName        = "/apisix.v1alpha1.APISIXGatewayService/CreateComponment"
)

// APISIXGatewayServiceClient is the client API for APISIXGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 网关配置服务
type APISIXGatewayServiceClient interface {
	// 路由管理
	CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error)
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error)
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error)
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
	// apisix 相关配置
	DeleteApisixRoute(ctx context.Context, in *DeleteApisixRouteRequest, opts ...grpc.CallOption) (*DeleteApisixRouteResponse, error)
	CreateApisixRoute(ctx context.Context, in *CreateApisixRouteRequest, opts ...grpc.CallOption) (*CreateApisixRouteResponse, error)
	// 上游服务管理
	CreateUpstream(ctx context.Context, in *CreateUpstreamRequest, opts ...grpc.CallOption) (*CreateUpstreamResponse, error)
	// 证书管理
	ListCerts(ctx context.Context, in *ListTLSRequest, opts ...grpc.CallOption) (*ListTLSResponse, error)
	// 证书删除
	DeleteCerts(ctx context.Context, in *DeleteCertsRequest, opts ...grpc.CallOption) (*DeleteCertsResponse, error)
	CreateUpdateTLS(ctx context.Context, in *CreateUPdateTLSRequest, opts ...grpc.CallOption) (*CreateUPdateTLSResponse, error)
	// 获取service list
	GetServiceList(ctx context.Context, in *GetServiceListRequest, opts ...grpc.CallOption) (*GetServiceListResponse, error)
	// 获取节点IP地址
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error)
	// 调转登录，统一认证
	JumpAndLogin(ctx context.Context, in *JumpAndLoginRequest, opts ...grpc.CallOption) (*JumpAndLoginResponse, error)
	GetDeployListFromPod(ctx context.Context, in *GetDeployListFromPodRequest, opts ...grpc.CallOption) (*GetDeployListFromPodResponse, error)
	GetDefaultHarborProject(ctx context.Context, in *GetDefaultHarborProjectRequest, opts ...grpc.CallOption) (*GetDefaultHarborProjectResponse, error)
	GetHarborProjectImages(ctx context.Context, in *GetHarborProjectImagesRequest, opts ...grpc.CallOption) (*GetHarborProjectImagesResponse, error)
	// 创建一个额外的deployment/statefulset service
	CreateComponment(ctx context.Context, in *CreateComponmentRequest, opts ...grpc.CallOption) (*CreateComponmentResponse, error)
}

type aPISIXGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPISIXGatewayServiceClient(cc grpc.ClientConnInterface) APISIXGatewayServiceClient {
	return &aPISIXGatewayServiceClient{cc}
}

func (c *aPISIXGatewayServiceClient) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRouteResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_CreateRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRouteResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_DeleteRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouteResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_GetRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_ListRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) DeleteApisixRoute(ctx context.Context, in *DeleteApisixRouteRequest, opts ...grpc.CallOption) (*DeleteApisixRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApisixRouteResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_DeleteApisixRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) CreateApisixRoute(ctx context.Context, in *CreateApisixRouteRequest, opts ...grpc.CallOption) (*CreateApisixRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateApisixRouteResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_CreateApisixRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) CreateUpstream(ctx context.Context, in *CreateUpstreamRequest, opts ...grpc.CallOption) (*CreateUpstreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUpstreamResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_CreateUpstream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) ListCerts(ctx context.Context, in *ListTLSRequest, opts ...grpc.CallOption) (*ListTLSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTLSResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_ListCerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) DeleteCerts(ctx context.Context, in *DeleteCertsRequest, opts ...grpc.CallOption) (*DeleteCertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCertsResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_DeleteCerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) CreateUpdateTLS(ctx context.Context, in *CreateUPdateTLSRequest, opts ...grpc.CallOption) (*CreateUPdateTLSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUPdateTLSResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_CreateUpdateTLS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) GetServiceList(ctx context.Context, in *GetServiceListRequest, opts ...grpc.CallOption) (*GetServiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceListResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_GetServiceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeInfoResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_GetNodeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) JumpAndLogin(ctx context.Context, in *JumpAndLoginRequest, opts ...grpc.CallOption) (*JumpAndLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JumpAndLoginResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_JumpAndLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) GetDeployListFromPod(ctx context.Context, in *GetDeployListFromPodRequest, opts ...grpc.CallOption) (*GetDeployListFromPodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeployListFromPodResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_GetDeployListFromPod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) GetDefaultHarborProject(ctx context.Context, in *GetDefaultHarborProjectRequest, opts ...grpc.CallOption) (*GetDefaultHarborProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefaultHarborProjectResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_GetDefaultHarborProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) GetHarborProjectImages(ctx context.Context, in *GetHarborProjectImagesRequest, opts ...grpc.CallOption) (*GetHarborProjectImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHarborProjectImagesResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_GetHarborProjectImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPISIXGatewayServiceClient) CreateComponment(ctx context.Context, in *CreateComponmentRequest, opts ...grpc.CallOption) (*CreateComponmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateComponmentResponse)
	err := c.cc.Invoke(ctx, APISIXGatewayService_CreateComponment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APISIXGatewayServiceServer is the server API for APISIXGatewayService service.
// All implementations must embed UnimplementedAPISIXGatewayServiceServer
// for forward compatibility.
//
// 网关配置服务
type APISIXGatewayServiceServer interface {
	// 路由管理
	CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error)
	DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error)
	GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error)
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	// apisix 相关配置
	DeleteApisixRoute(context.Context, *DeleteApisixRouteRequest) (*DeleteApisixRouteResponse, error)
	CreateApisixRoute(context.Context, *CreateApisixRouteRequest) (*CreateApisixRouteResponse, error)
	// 上游服务管理
	CreateUpstream(context.Context, *CreateUpstreamRequest) (*CreateUpstreamResponse, error)
	// 证书管理
	ListCerts(context.Context, *ListTLSRequest) (*ListTLSResponse, error)
	// 证书删除
	DeleteCerts(context.Context, *DeleteCertsRequest) (*DeleteCertsResponse, error)
	CreateUpdateTLS(context.Context, *CreateUPdateTLSRequest) (*CreateUPdateTLSResponse, error)
	// 获取service list
	GetServiceList(context.Context, *GetServiceListRequest) (*GetServiceListResponse, error)
	// 获取节点IP地址
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error)
	// 调转登录，统一认证
	JumpAndLogin(context.Context, *JumpAndLoginRequest) (*JumpAndLoginResponse, error)
	GetDeployListFromPod(context.Context, *GetDeployListFromPodRequest) (*GetDeployListFromPodResponse, error)
	GetDefaultHarborProject(context.Context, *GetDefaultHarborProjectRequest) (*GetDefaultHarborProjectResponse, error)
	GetHarborProjectImages(context.Context, *GetHarborProjectImagesRequest) (*GetHarborProjectImagesResponse, error)
	// 创建一个额外的deployment/statefulset service
	CreateComponment(context.Context, *CreateComponmentRequest) (*CreateComponmentResponse, error)
	mustEmbedUnimplementedAPISIXGatewayServiceServer()
}

// UnimplementedAPISIXGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPISIXGatewayServiceServer struct{}

func (UnimplementedAPISIXGatewayServiceServer) CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) DeleteApisixRoute(context.Context, *DeleteApisixRouteRequest) (*DeleteApisixRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApisixRoute not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) CreateApisixRoute(context.Context, *CreateApisixRouteRequest) (*CreateApisixRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApisixRoute not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) CreateUpstream(context.Context, *CreateUpstreamRequest) (*CreateUpstreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpstream not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) ListCerts(context.Context, *ListTLSRequest) (*ListTLSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCerts not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) DeleteCerts(context.Context, *DeleteCertsRequest) (*DeleteCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCerts not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) CreateUpdateTLS(context.Context, *CreateUPdateTLSRequest) (*CreateUPdateTLSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdateTLS not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) GetServiceList(context.Context, *GetServiceListRequest) (*GetServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceList not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) JumpAndLogin(context.Context, *JumpAndLoginRequest) (*JumpAndLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JumpAndLogin not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) GetDeployListFromPod(context.Context, *GetDeployListFromPodRequest) (*GetDeployListFromPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployListFromPod not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) GetDefaultHarborProject(context.Context, *GetDefaultHarborProjectRequest) (*GetDefaultHarborProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultHarborProject not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) GetHarborProjectImages(context.Context, *GetHarborProjectImagesRequest) (*GetHarborProjectImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHarborProjectImages not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) CreateComponment(context.Context, *CreateComponmentRequest) (*CreateComponmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComponment not implemented")
}
func (UnimplementedAPISIXGatewayServiceServer) mustEmbedUnimplementedAPISIXGatewayServiceServer() {}
func (UnimplementedAPISIXGatewayServiceServer) testEmbeddedByValue()                              {}

// UnsafeAPISIXGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APISIXGatewayServiceServer will
// result in compilation errors.
type UnsafeAPISIXGatewayServiceServer interface {
	mustEmbedUnimplementedAPISIXGatewayServiceServer()
}

func RegisterAPISIXGatewayServiceServer(s grpc.ServiceRegistrar, srv APISIXGatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedAPISIXGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&APISIXGatewayService_ServiceDesc, srv)
}

func _APISIXGatewayService_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_CreateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).CreateRoute(ctx, req.(*CreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_DeleteRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_ListRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_DeleteApisixRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApisixRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).DeleteApisixRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_DeleteApisixRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).DeleteApisixRoute(ctx, req.(*DeleteApisixRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_CreateApisixRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApisixRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).CreateApisixRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_CreateApisixRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).CreateApisixRoute(ctx, req.(*CreateApisixRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_CreateUpstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpstreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).CreateUpstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_CreateUpstream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).CreateUpstream(ctx, req.(*CreateUpstreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_ListCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).ListCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_ListCerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).ListCerts(ctx, req.(*ListTLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_DeleteCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).DeleteCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_DeleteCerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).DeleteCerts(ctx, req.(*DeleteCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_CreateUpdateTLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUPdateTLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).CreateUpdateTLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_CreateUpdateTLS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).CreateUpdateTLS(ctx, req.(*CreateUPdateTLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_GetServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).GetServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_GetServiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).GetServiceList(ctx, req.(*GetServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_GetNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_JumpAndLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JumpAndLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).JumpAndLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_JumpAndLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).JumpAndLogin(ctx, req.(*JumpAndLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_GetDeployListFromPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployListFromPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).GetDeployListFromPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_GetDeployListFromPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).GetDeployListFromPod(ctx, req.(*GetDeployListFromPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_GetDefaultHarborProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultHarborProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).GetDefaultHarborProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_GetDefaultHarborProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).GetDefaultHarborProject(ctx, req.(*GetDefaultHarborProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_GetHarborProjectImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHarborProjectImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).GetHarborProjectImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_GetHarborProjectImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).GetHarborProjectImages(ctx, req.(*GetHarborProjectImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APISIXGatewayService_CreateComponment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComponmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APISIXGatewayServiceServer).CreateComponment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APISIXGatewayService_CreateComponment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APISIXGatewayServiceServer).CreateComponment(ctx, req.(*CreateComponmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APISIXGatewayService_ServiceDesc is the grpc.ServiceDesc for APISIXGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APISIXGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apisix.v1alpha1.APISIXGatewayService",
	HandlerType: (*APISIXGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoute",
			Handler:    _APISIXGatewayService_CreateRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _APISIXGatewayService_DeleteRoute_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _APISIXGatewayService_GetRoute_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _APISIXGatewayService_ListRoutes_Handler,
		},
		{
			MethodName: "DeleteApisixRoute",
			Handler:    _APISIXGatewayService_DeleteApisixRoute_Handler,
		},
		{
			MethodName: "CreateApisixRoute",
			Handler:    _APISIXGatewayService_CreateApisixRoute_Handler,
		},
		{
			MethodName: "CreateUpstream",
			Handler:    _APISIXGatewayService_CreateUpstream_Handler,
		},
		{
			MethodName: "ListCerts",
			Handler:    _APISIXGatewayService_ListCerts_Handler,
		},
		{
			MethodName: "DeleteCerts",
			Handler:    _APISIXGatewayService_DeleteCerts_Handler,
		},
		{
			MethodName: "CreateUpdateTLS",
			Handler:    _APISIXGatewayService_CreateUpdateTLS_Handler,
		},
		{
			MethodName: "GetServiceList",
			Handler:    _APISIXGatewayService_GetServiceList_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _APISIXGatewayService_GetNodeInfo_Handler,
		},
		{
			MethodName: "JumpAndLogin",
			Handler:    _APISIXGatewayService_JumpAndLogin_Handler,
		},
		{
			MethodName: "GetDeployListFromPod",
			Handler:    _APISIXGatewayService_GetDeployListFromPod_Handler,
		},
		{
			MethodName: "GetDefaultHarborProject",
			Handler:    _APISIXGatewayService_GetDefaultHarborProject_Handler,
		},
		{
			MethodName: "GetHarborProjectImages",
			Handler:    _APISIXGatewayService_GetHarborProjectImages_Handler,
		},
		{
			MethodName: "CreateComponment",
			Handler:    _APISIXGatewayService_CreateComponment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routes_service.proto",
}
