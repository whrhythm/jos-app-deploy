// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: helm_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HelmManagerService_ListCharts_FullMethodName             = "/helm.v1alpha1.HelmManagerService/ListCharts"
	HelmManagerService_ConfigureRepo_FullMethodName          = "/helm.v1alpha1.HelmManagerService/ConfigureRepo"
	HelmManagerService_InstallChart_FullMethodName           = "/helm.v1alpha1.HelmManagerService/InstallChart"
	HelmManagerService_WatchInstallStatus_FullMethodName     = "/helm.v1alpha1.HelmManagerService/WatchInstallStatus"
	HelmManagerService_WatchPodStatus_FullMethodName         = "/helm.v1alpha1.HelmManagerService/WatchPodStatus"
	HelmManagerService_CheckApisixRoute_FullMethodName       = "/helm.v1alpha1.HelmManagerService/CheckApisixRoute"
	HelmManagerService_CreateChartApplication_FullMethodName = "/helm.v1alpha1.HelmManagerService/CreateChartApplication"
	HelmManagerService_GetPodLogs_FullMethodName             = "/helm.v1alpha1.HelmManagerService/GetPodLogs"
	HelmManagerService_CheckPodTerminal_FullMethodName       = "/helm.v1alpha1.HelmManagerService/CheckPodTerminal"
)

// HelmManagerServiceClient is the client API for HelmManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelmManagerServiceClient interface {
	// 1. 获取私有仓库中所有 Helm Chart 信息
	ListCharts(ctx context.Context, in *ListChartsRequest, opts ...grpc.CallOption) (*ListChartsResponse, error)
	// 2. 设置私有仓库地址和权限
	ConfigureRepo(ctx context.Context, in *ConfigureRepoRequest, opts ...grpc.CallOption) (*ConfigureRepoResponse, error)
	// 3. 安装 Helm Chart
	InstallChart(ctx context.Context, in *InstallChartRequest, opts ...grpc.CallOption) (*InstallChartResponse, error)
	// 4. 监控 Chart 安装状态
	WatchInstallStatus(ctx context.Context, in *WatchInstallStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InstallStatus], error)
	// 5. 监控 Chart 下 Pod 状态
	WatchPodStatus(ctx context.Context, in *WatchPodStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PodStatus], error)
	// 6. 检查已安装 Chart 是否包含 ApisixRoute 资源
	CheckApisixRoute(ctx context.Context, in *CheckApisixRouteRequest, opts ...grpc.CallOption) (*CheckApisixRouteResponse, error)
	// 7. 创建 Helm Chart 应用
	CreateChartApplication(ctx context.Context, in *CreateChartApplicationRequest, opts ...grpc.CallOption) (*CreateChartApplicationResponse, error)
	// 8. 获取 Pod 日志
	GetPodLogs(ctx context.Context, in *GetPodLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogChunk], error)
	// 9. 检查 Pod 是否支持终端交互
	CheckPodTerminal(ctx context.Context, in *CheckPodTerminalRequest, opts ...grpc.CallOption) (*CheckPodTerminalResponse, error)
}

type helmManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelmManagerServiceClient(cc grpc.ClientConnInterface) HelmManagerServiceClient {
	return &helmManagerServiceClient{cc}
}

func (c *helmManagerServiceClient) ListCharts(ctx context.Context, in *ListChartsRequest, opts ...grpc.CallOption) (*ListChartsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChartsResponse)
	err := c.cc.Invoke(ctx, HelmManagerService_ListCharts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerServiceClient) ConfigureRepo(ctx context.Context, in *ConfigureRepoRequest, opts ...grpc.CallOption) (*ConfigureRepoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureRepoResponse)
	err := c.cc.Invoke(ctx, HelmManagerService_ConfigureRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerServiceClient) InstallChart(ctx context.Context, in *InstallChartRequest, opts ...grpc.CallOption) (*InstallChartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallChartResponse)
	err := c.cc.Invoke(ctx, HelmManagerService_InstallChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerServiceClient) WatchInstallStatus(ctx context.Context, in *WatchInstallStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InstallStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HelmManagerService_ServiceDesc.Streams[0], HelmManagerService_WatchInstallStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchInstallStatusRequest, InstallStatus]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelmManagerService_WatchInstallStatusClient = grpc.ServerStreamingClient[InstallStatus]

func (c *helmManagerServiceClient) WatchPodStatus(ctx context.Context, in *WatchPodStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PodStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HelmManagerService_ServiceDesc.Streams[1], HelmManagerService_WatchPodStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchPodStatusRequest, PodStatus]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelmManagerService_WatchPodStatusClient = grpc.ServerStreamingClient[PodStatus]

func (c *helmManagerServiceClient) CheckApisixRoute(ctx context.Context, in *CheckApisixRouteRequest, opts ...grpc.CallOption) (*CheckApisixRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckApisixRouteResponse)
	err := c.cc.Invoke(ctx, HelmManagerService_CheckApisixRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerServiceClient) CreateChartApplication(ctx context.Context, in *CreateChartApplicationRequest, opts ...grpc.CallOption) (*CreateChartApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChartApplicationResponse)
	err := c.cc.Invoke(ctx, HelmManagerService_CreateChartApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerServiceClient) GetPodLogs(ctx context.Context, in *GetPodLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HelmManagerService_ServiceDesc.Streams[2], HelmManagerService_GetPodLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPodLogsRequest, LogChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelmManagerService_GetPodLogsClient = grpc.ServerStreamingClient[LogChunk]

func (c *helmManagerServiceClient) CheckPodTerminal(ctx context.Context, in *CheckPodTerminalRequest, opts ...grpc.CallOption) (*CheckPodTerminalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPodTerminalResponse)
	err := c.cc.Invoke(ctx, HelmManagerService_CheckPodTerminal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelmManagerServiceServer is the server API for HelmManagerService service.
// All implementations must embed UnimplementedHelmManagerServiceServer
// for forward compatibility.
type HelmManagerServiceServer interface {
	// 1. 获取私有仓库中所有 Helm Chart 信息
	ListCharts(context.Context, *ListChartsRequest) (*ListChartsResponse, error)
	// 2. 设置私有仓库地址和权限
	ConfigureRepo(context.Context, *ConfigureRepoRequest) (*ConfigureRepoResponse, error)
	// 3. 安装 Helm Chart
	InstallChart(context.Context, *InstallChartRequest) (*InstallChartResponse, error)
	// 4. 监控 Chart 安装状态
	WatchInstallStatus(*WatchInstallStatusRequest, grpc.ServerStreamingServer[InstallStatus]) error
	// 5. 监控 Chart 下 Pod 状态
	WatchPodStatus(*WatchPodStatusRequest, grpc.ServerStreamingServer[PodStatus]) error
	// 6. 检查已安装 Chart 是否包含 ApisixRoute 资源
	CheckApisixRoute(context.Context, *CheckApisixRouteRequest) (*CheckApisixRouteResponse, error)
	// 7. 创建 Helm Chart 应用
	CreateChartApplication(context.Context, *CreateChartApplicationRequest) (*CreateChartApplicationResponse, error)
	// 8. 获取 Pod 日志
	GetPodLogs(*GetPodLogsRequest, grpc.ServerStreamingServer[LogChunk]) error
	// 9. 检查 Pod 是否支持终端交互
	CheckPodTerminal(context.Context, *CheckPodTerminalRequest) (*CheckPodTerminalResponse, error)
	mustEmbedUnimplementedHelmManagerServiceServer()
}

// UnimplementedHelmManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHelmManagerServiceServer struct{}

func (UnimplementedHelmManagerServiceServer) ListCharts(context.Context, *ListChartsRequest) (*ListChartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCharts not implemented")
}
func (UnimplementedHelmManagerServiceServer) ConfigureRepo(context.Context, *ConfigureRepoRequest) (*ConfigureRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureRepo not implemented")
}
func (UnimplementedHelmManagerServiceServer) InstallChart(context.Context, *InstallChartRequest) (*InstallChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallChart not implemented")
}
func (UnimplementedHelmManagerServiceServer) WatchInstallStatus(*WatchInstallStatusRequest, grpc.ServerStreamingServer[InstallStatus]) error {
	return status.Errorf(codes.Unimplemented, "method WatchInstallStatus not implemented")
}
func (UnimplementedHelmManagerServiceServer) WatchPodStatus(*WatchPodStatusRequest, grpc.ServerStreamingServer[PodStatus]) error {
	return status.Errorf(codes.Unimplemented, "method WatchPodStatus not implemented")
}
func (UnimplementedHelmManagerServiceServer) CheckApisixRoute(context.Context, *CheckApisixRouteRequest) (*CheckApisixRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckApisixRoute not implemented")
}
func (UnimplementedHelmManagerServiceServer) CreateChartApplication(context.Context, *CreateChartApplicationRequest) (*CreateChartApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChartApplication not implemented")
}
func (UnimplementedHelmManagerServiceServer) GetPodLogs(*GetPodLogsRequest, grpc.ServerStreamingServer[LogChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetPodLogs not implemented")
}
func (UnimplementedHelmManagerServiceServer) CheckPodTerminal(context.Context, *CheckPodTerminalRequest) (*CheckPodTerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPodTerminal not implemented")
}
func (UnimplementedHelmManagerServiceServer) mustEmbedUnimplementedHelmManagerServiceServer() {}
func (UnimplementedHelmManagerServiceServer) testEmbeddedByValue()                            {}

// UnsafeHelmManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelmManagerServiceServer will
// result in compilation errors.
type UnsafeHelmManagerServiceServer interface {
	mustEmbedUnimplementedHelmManagerServiceServer()
}

func RegisterHelmManagerServiceServer(s grpc.ServiceRegistrar, srv HelmManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedHelmManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HelmManagerService_ServiceDesc, srv)
}

func _HelmManagerService_ListCharts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServiceServer).ListCharts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManagerService_ListCharts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServiceServer).ListCharts(ctx, req.(*ListChartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManagerService_ConfigureRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServiceServer).ConfigureRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManagerService_ConfigureRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServiceServer).ConfigureRepo(ctx, req.(*ConfigureRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManagerService_InstallChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServiceServer).InstallChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManagerService_InstallChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServiceServer).InstallChart(ctx, req.(*InstallChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManagerService_WatchInstallStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchInstallStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelmManagerServiceServer).WatchInstallStatus(m, &grpc.GenericServerStream[WatchInstallStatusRequest, InstallStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelmManagerService_WatchInstallStatusServer = grpc.ServerStreamingServer[InstallStatus]

func _HelmManagerService_WatchPodStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchPodStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelmManagerServiceServer).WatchPodStatus(m, &grpc.GenericServerStream[WatchPodStatusRequest, PodStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelmManagerService_WatchPodStatusServer = grpc.ServerStreamingServer[PodStatus]

func _HelmManagerService_CheckApisixRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckApisixRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServiceServer).CheckApisixRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManagerService_CheckApisixRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServiceServer).CheckApisixRoute(ctx, req.(*CheckApisixRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManagerService_CreateChartApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChartApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServiceServer).CreateChartApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManagerService_CreateChartApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServiceServer).CreateChartApplication(ctx, req.(*CreateChartApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManagerService_GetPodLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPodLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelmManagerServiceServer).GetPodLogs(m, &grpc.GenericServerStream[GetPodLogsRequest, LogChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelmManagerService_GetPodLogsServer = grpc.ServerStreamingServer[LogChunk]

func _HelmManagerService_CheckPodTerminal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPodTerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServiceServer).CheckPodTerminal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManagerService_CheckPodTerminal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServiceServer).CheckPodTerminal(ctx, req.(*CheckPodTerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelmManagerService_ServiceDesc is the grpc.ServiceDesc for HelmManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelmManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helm.v1alpha1.HelmManagerService",
	HandlerType: (*HelmManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCharts",
			Handler:    _HelmManagerService_ListCharts_Handler,
		},
		{
			MethodName: "ConfigureRepo",
			Handler:    _HelmManagerService_ConfigureRepo_Handler,
		},
		{
			MethodName: "InstallChart",
			Handler:    _HelmManagerService_InstallChart_Handler,
		},
		{
			MethodName: "CheckApisixRoute",
			Handler:    _HelmManagerService_CheckApisixRoute_Handler,
		},
		{
			MethodName: "CreateChartApplication",
			Handler:    _HelmManagerService_CreateChartApplication_Handler,
		},
		{
			MethodName: "CheckPodTerminal",
			Handler:    _HelmManagerService_CheckPodTerminal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchInstallStatus",
			Handler:       _HelmManagerService_WatchInstallStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPodStatus",
			Handler:       _HelmManagerService_WatchPodStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPodLogs",
			Handler:       _HelmManagerService_GetPodLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "helm_service.proto",
}
