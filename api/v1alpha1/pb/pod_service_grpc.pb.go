// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: pod_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PodManagerService_DeletePod_FullMethodName                      = "/pod.v1alpha1.PodManagerService/DeletePod"
	PodManagerService_GetPodLogs_FullMethodName                     = "/pod.v1alpha1.PodManagerService/GetPodLogs"
	PodManagerService_ExecPodTerminal_FullMethodName                = "/pod.v1alpha1.PodManagerService/ExecPodTerminal"
	PodManagerService_ConfigureHorizontalAutoscaling_FullMethodName = "/pod.v1alpha1.PodManagerService/ConfigureHorizontalAutoscaling"
	PodManagerService_ConfigureVerticalAutoscaling_FullMethodName   = "/pod.v1alpha1.PodManagerService/ConfigureVerticalAutoscaling"
	PodManagerService_CreateCanaryDeployment_FullMethodName         = "/pod.v1alpha1.PodManagerService/CreateCanaryDeployment"
	PodManagerService_CreateBlueGreenDeployment_FullMethodName      = "/pod.v1alpha1.PodManagerService/CreateBlueGreenDeployment"
	PodManagerService_PodsMetrics_FullMethodName                    = "/pod.v1alpha1.PodManagerService/PodsMetrics"
)

// PodManagerServiceClient is the client API for PodManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodManagerServiceClient interface {
	// 删除 Pod
	DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*DeletePodResponse, error)
	// 获取 Pod 日志 (流式)
	GetPodLogs(ctx context.Context, in *GetPodLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogChunk], error)
	// 进入 Pod 终端 (WebSocket/流式)
	ExecPodTerminal(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TerminalMessage, TerminalMessage], error)
	// 配置水平自动伸缩 (HPA)
	ConfigureHorizontalAutoscaling(ctx context.Context, in *ConfigureHPARequest, opts ...grpc.CallOption) (*ConfigureHPAResponse, error)
	// 配置垂直自动伸缩 (VPA)
	ConfigureVerticalAutoscaling(ctx context.Context, in *ConfigureVPARequest, opts ...grpc.CallOption) (*ConfigureVPAResponse, error)
	// 金丝雀发布
	CreateCanaryDeployment(ctx context.Context, in *CreateCanaryRequest, opts ...grpc.CallOption) (*CreateCanaryResponse, error)
	// 蓝绿发布
	CreateBlueGreenDeployment(ctx context.Context, in *CreateBlueGreenRequest, opts ...grpc.CallOption) (*CreateBlueGreenResponse, error)
	// 统计应用下所有pod的cpu/mem信息
	PodsMetrics(ctx context.Context, in *PodsMetricsRequest, opts ...grpc.CallOption) (*PodsMetricsResponse, error)
}

type podManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPodManagerServiceClient(cc grpc.ClientConnInterface) PodManagerServiceClient {
	return &podManagerServiceClient{cc}
}

func (c *podManagerServiceClient) DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*DeletePodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePodResponse)
	err := c.cc.Invoke(ctx, PodManagerService_DeletePod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podManagerServiceClient) GetPodLogs(ctx context.Context, in *GetPodLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PodManagerService_ServiceDesc.Streams[0], PodManagerService_GetPodLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPodLogsRequest, LogChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodManagerService_GetPodLogsClient = grpc.ServerStreamingClient[LogChunk]

func (c *podManagerServiceClient) ExecPodTerminal(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TerminalMessage, TerminalMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PodManagerService_ServiceDesc.Streams[1], PodManagerService_ExecPodTerminal_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TerminalMessage, TerminalMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodManagerService_ExecPodTerminalClient = grpc.BidiStreamingClient[TerminalMessage, TerminalMessage]

func (c *podManagerServiceClient) ConfigureHorizontalAutoscaling(ctx context.Context, in *ConfigureHPARequest, opts ...grpc.CallOption) (*ConfigureHPAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureHPAResponse)
	err := c.cc.Invoke(ctx, PodManagerService_ConfigureHorizontalAutoscaling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podManagerServiceClient) ConfigureVerticalAutoscaling(ctx context.Context, in *ConfigureVPARequest, opts ...grpc.CallOption) (*ConfigureVPAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureVPAResponse)
	err := c.cc.Invoke(ctx, PodManagerService_ConfigureVerticalAutoscaling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podManagerServiceClient) CreateCanaryDeployment(ctx context.Context, in *CreateCanaryRequest, opts ...grpc.CallOption) (*CreateCanaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCanaryResponse)
	err := c.cc.Invoke(ctx, PodManagerService_CreateCanaryDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podManagerServiceClient) CreateBlueGreenDeployment(ctx context.Context, in *CreateBlueGreenRequest, opts ...grpc.CallOption) (*CreateBlueGreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBlueGreenResponse)
	err := c.cc.Invoke(ctx, PodManagerService_CreateBlueGreenDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podManagerServiceClient) PodsMetrics(ctx context.Context, in *PodsMetricsRequest, opts ...grpc.CallOption) (*PodsMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PodsMetricsResponse)
	err := c.cc.Invoke(ctx, PodManagerService_PodsMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodManagerServiceServer is the server API for PodManagerService service.
// All implementations must embed UnimplementedPodManagerServiceServer
// for forward compatibility.
type PodManagerServiceServer interface {
	// 删除 Pod
	DeletePod(context.Context, *DeletePodRequest) (*DeletePodResponse, error)
	// 获取 Pod 日志 (流式)
	GetPodLogs(*GetPodLogsRequest, grpc.ServerStreamingServer[LogChunk]) error
	// 进入 Pod 终端 (WebSocket/流式)
	ExecPodTerminal(grpc.BidiStreamingServer[TerminalMessage, TerminalMessage]) error
	// 配置水平自动伸缩 (HPA)
	ConfigureHorizontalAutoscaling(context.Context, *ConfigureHPARequest) (*ConfigureHPAResponse, error)
	// 配置垂直自动伸缩 (VPA)
	ConfigureVerticalAutoscaling(context.Context, *ConfigureVPARequest) (*ConfigureVPAResponse, error)
	// 金丝雀发布
	CreateCanaryDeployment(context.Context, *CreateCanaryRequest) (*CreateCanaryResponse, error)
	// 蓝绿发布
	CreateBlueGreenDeployment(context.Context, *CreateBlueGreenRequest) (*CreateBlueGreenResponse, error)
	// 统计应用下所有pod的cpu/mem信息
	PodsMetrics(context.Context, *PodsMetricsRequest) (*PodsMetricsResponse, error)
	mustEmbedUnimplementedPodManagerServiceServer()
}

// UnimplementedPodManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPodManagerServiceServer struct{}

func (UnimplementedPodManagerServiceServer) DeletePod(context.Context, *DeletePodRequest) (*DeletePodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePod not implemented")
}
func (UnimplementedPodManagerServiceServer) GetPodLogs(*GetPodLogsRequest, grpc.ServerStreamingServer[LogChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetPodLogs not implemented")
}
func (UnimplementedPodManagerServiceServer) ExecPodTerminal(grpc.BidiStreamingServer[TerminalMessage, TerminalMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ExecPodTerminal not implemented")
}
func (UnimplementedPodManagerServiceServer) ConfigureHorizontalAutoscaling(context.Context, *ConfigureHPARequest) (*ConfigureHPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureHorizontalAutoscaling not implemented")
}
func (UnimplementedPodManagerServiceServer) ConfigureVerticalAutoscaling(context.Context, *ConfigureVPARequest) (*ConfigureVPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureVerticalAutoscaling not implemented")
}
func (UnimplementedPodManagerServiceServer) CreateCanaryDeployment(context.Context, *CreateCanaryRequest) (*CreateCanaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCanaryDeployment not implemented")
}
func (UnimplementedPodManagerServiceServer) CreateBlueGreenDeployment(context.Context, *CreateBlueGreenRequest) (*CreateBlueGreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlueGreenDeployment not implemented")
}
func (UnimplementedPodManagerServiceServer) PodsMetrics(context.Context, *PodsMetricsRequest) (*PodsMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PodsMetrics not implemented")
}
func (UnimplementedPodManagerServiceServer) mustEmbedUnimplementedPodManagerServiceServer() {}
func (UnimplementedPodManagerServiceServer) testEmbeddedByValue()                           {}

// UnsafePodManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodManagerServiceServer will
// result in compilation errors.
type UnsafePodManagerServiceServer interface {
	mustEmbedUnimplementedPodManagerServiceServer()
}

func RegisterPodManagerServiceServer(s grpc.ServiceRegistrar, srv PodManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPodManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PodManagerService_ServiceDesc, srv)
}

func _PodManagerService_DeletePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodManagerServiceServer).DeletePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodManagerService_DeletePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodManagerServiceServer).DeletePod(ctx, req.(*DeletePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodManagerService_GetPodLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPodLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PodManagerServiceServer).GetPodLogs(m, &grpc.GenericServerStream[GetPodLogsRequest, LogChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodManagerService_GetPodLogsServer = grpc.ServerStreamingServer[LogChunk]

func _PodManagerService_ExecPodTerminal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PodManagerServiceServer).ExecPodTerminal(&grpc.GenericServerStream[TerminalMessage, TerminalMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodManagerService_ExecPodTerminalServer = grpc.BidiStreamingServer[TerminalMessage, TerminalMessage]

func _PodManagerService_ConfigureHorizontalAutoscaling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureHPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodManagerServiceServer).ConfigureHorizontalAutoscaling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodManagerService_ConfigureHorizontalAutoscaling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodManagerServiceServer).ConfigureHorizontalAutoscaling(ctx, req.(*ConfigureHPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodManagerService_ConfigureVerticalAutoscaling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureVPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodManagerServiceServer).ConfigureVerticalAutoscaling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodManagerService_ConfigureVerticalAutoscaling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodManagerServiceServer).ConfigureVerticalAutoscaling(ctx, req.(*ConfigureVPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodManagerService_CreateCanaryDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCanaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodManagerServiceServer).CreateCanaryDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodManagerService_CreateCanaryDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodManagerServiceServer).CreateCanaryDeployment(ctx, req.(*CreateCanaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodManagerService_CreateBlueGreenDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlueGreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodManagerServiceServer).CreateBlueGreenDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodManagerService_CreateBlueGreenDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodManagerServiceServer).CreateBlueGreenDeployment(ctx, req.(*CreateBlueGreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodManagerService_PodsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodsMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodManagerServiceServer).PodsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodManagerService_PodsMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodManagerServiceServer).PodsMetrics(ctx, req.(*PodsMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PodManagerService_ServiceDesc is the grpc.ServiceDesc for PodManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pod.v1alpha1.PodManagerService",
	HandlerType: (*PodManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeletePod",
			Handler:    _PodManagerService_DeletePod_Handler,
		},
		{
			MethodName: "ConfigureHorizontalAutoscaling",
			Handler:    _PodManagerService_ConfigureHorizontalAutoscaling_Handler,
		},
		{
			MethodName: "ConfigureVerticalAutoscaling",
			Handler:    _PodManagerService_ConfigureVerticalAutoscaling_Handler,
		},
		{
			MethodName: "CreateCanaryDeployment",
			Handler:    _PodManagerService_CreateCanaryDeployment_Handler,
		},
		{
			MethodName: "CreateBlueGreenDeployment",
			Handler:    _PodManagerService_CreateBlueGreenDeployment_Handler,
		},
		{
			MethodName: "PodsMetrics",
			Handler:    _PodManagerService_PodsMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPodLogs",
			Handler:       _PodManagerService_GetPodLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecPodTerminal",
			Handler:       _PodManagerService_ExecPodTerminal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pod_service.proto",
}
