syntax = "proto3";

package helm.v1alpha1;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
// import "google/protobuf/empty.proto";
option go_package = "./pkg/pb/;pb";


service HelmManagerService {
  // 1. 获取私有仓库中所有 Helm Chart 信息
  rpc ListCharts (ListChartsRequest) returns (ListChartsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/charts"
    };
  }

  // 2. 设置私有仓库地址和权限
  rpc ConfigureRepo (ConfigureRepoRequest) returns (ConfigureRepoResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/repos"
      body: "*"
    };
  }

  // 3. 安装 Helm Chart
  rpc InstallChart (InstallChartRequest) returns (InstallChartResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{namespace}/charts/{release_name}/install"
      body: "*"
    };
  }

  // 4. 卸载 Helm Chart
  rpc UninstallChart (UninstallChartRequest) returns (UninstallChartResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{namespace}/charts/{release_name}/uninstall"
      body: "*"
    };
  }

  // 5. 监控 Chart 安装状态
  rpc WatchInstallStatus (WatchInstallStatusRequest) returns (stream InstallStatus) {
    option (google.api.http) = {
      get: "/v1alpha1/{namespace}/charts/{release_name}/status"
    };
  }

  // 6. 监控 Chart 下 Pod 状态
  rpc ListPodStatus (ListPodStatusRequest) returns (ListPodStatusResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{namespace}/charts/{release_name}/pods"
    };
  }

  // 7. 检查已安装 Chart 是否包含 ApisixRoute 资源
  rpc CheckApisixRoute (CheckApisixRouteRequest) returns (CheckApisixRouteResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/charts/{release_name}/apisix"
    };
  }

  // 8. 创建 Helm Chart 应用
  rpc CreateChartApplication (CreateChartApplicationRequest) returns (CreateChartApplicationResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/applications"
      body: "*"
    };
  }

  // 9. 获取 Pod 日志
  rpc GetPodLogs (GetPodLogsRequest) returns (stream LogChunk) {
    option (google.api.http) = {
      get: "/v1alpha1/pods/{namespace}/{pod_name}/logs"
    };
  }

  // 10. 检查 Pod 是否支持终端交互
  rpc CheckPodTerminal (CheckPodTerminalRequest) returns (CheckPodTerminalResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/pods/{namespace}/{pod_name}/terminal"
    };
  }

  // 11. 上传helm chart文件到默认仓库
  rpc UploadChartPackage(stream UploadChartPackageRequest) returns (UploadChartPackageResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/chart/upload"
      body: "*"
    };
  }

  // 12. 升级 Helm Chart
  rpc UpgradeChart (UpgradeChartRequest) returns (UpgradeChartResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{namespace}/charts/{release_name}/upgrade"
      body: "*"
    };
  }

  // 13. 回滚 Helm Chart
  rpc RollbackChart (RollbackChartRequest) returns (RollbackChartResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{namespace}/charts/{release_name}/rollback"
      body: "*"
    };
  }

  // 14. 查询 Chart 所有版本信息
  rpc ListChartVersions (ListChartVersionsRequest) returns (ListChartVersionsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/charts/{repo_name}/{chart_name}/versions"
    };
  }

  // 15. 获取应用列表
  rpc ListInstalledCharts (ListInstalledChartsRequest) returns (ListInstalledChartsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{namespace}/charts"
    };
  }
}

// ========== 请求/响应结构定义 ==========

// 1. 获取 Chart 列表
message ListChartsRequest {
  string repo_name = 1;  // 私有仓库名称（可选）
  string keyword   = 2;
  int32 limit      = 3;
  int32 size       = 4;
}

message ChartInfo {
  string name = 1;           // Chart 名称
  string chart_version = 2;  // Chart 版本
  string icon_url = 3;       // 图标 URL
  string app_version = 4;    // 应用版本
  string description = 5;    // 应用描述
  string updateDate = 6;     // 更新时间
  string updateUser = 7;     // 更新者
}

message ListChartsData {
  int32 total = 1;
  int32 page_size = 2;
  int32 total_page = 3;
  int32 current_page = 4;
  repeated ChartInfo charts = 5;
}

message ListChartsResponse {
  int32 code = 1;
  string message = 2;
  bool success = 3;
  google.protobuf.Any data = 4;
}

// 2. 配置私有仓库
message ConfigureRepoRequest {
  string name = 1;          // 仓库名称
  string url = 2;           // 仓库地址
  string username = 3;      // 用户名（可选）
  string password = 4;      // 密码（可选）
  string ca_file = 5;       // CA 证书（可选）
}

message ConfigureRepoResponse {
  bool success = 1;
}

message K8sObject {
  google.protobuf.Any object = 1;  // 存储任意 Kubernetes 对象
}

message K8sObjectList {
  repeated K8sObject items = 1;  // 相当于 []runtime.Object
}

// 3. 安装 Chart
message InstallChartRequest {
  string name = 1;          // Chart 名称
  string release_name = 2;  // 安装的名称
  string version = 3;       // Chart 版本
  string namespace =4;     // 目标命名空间
  bool dry_run = 5;         // 检查chart文件是否合法
  string values = 6;        // values.yaml 内容（JSON/YAML 字符串）
}

message InstallChartResponse {
  int32 code = 1;
  string release_name = 2;  // 安装名称
  string first_deployed = 3;
  string last_deployed = 4;
  string deleted = 5;
  string message = 6;
  string status = 7;
  map<string, K8sObjectList> entries = 8;
}

// 4. 卸载请求参数
message UninstallChartRequest {
  string namespace = 1;             // 命名空间（从 URL 路径获取）
  string release_name = 2;          // Chart 名称（从 URL 路径获取）
  bool purge = 3;                   // 是否彻底删除（从 Body 或 Query 获取）
  map<string, string> options = 4;  // 其他卸载选项（如超时时间）
}

// 4. 卸载响应
message UninstallChartResponse {
  int32 code = 1;      // 是否成功
  string message = 2;    // 详细信息（如错误原因）
}

// 5. 监控安装状态
message WatchInstallStatusRequest {
  string release_name = 1;
  string namespace = 2;     // 命名空间
}

message InstallStatus {
  string phase = 1;         // Installing | Deployed | Failed
  string message = 2;       // 状态详情
}

// 6. 监控 Pod 状态
message ListPodStatusRequest {
  string namespace = 1;      // 目标命名空间
  string release_name = 2;    // Helm Release 名称
}

message PodStatus {
  string name = 1;          // Pod 名称
  string phase = 2;         // 当前阶段（Pending/Running/Succeeded/Failed）
  string ready = 3;         // 就绪状态（如 "1/2"）
  int32 restarts = 4;       // 容器重启次数
  string ip = 5;            // Pod IP 地址
  string node = 6;          // 所在节点名称
  google.protobuf.Timestamp timestamp = 7; // 状态更新时间
  map<string, string> labels = 8;         // Pod 标签
  repeated ContainerStatus containers = 9; // 容器状态详情
}

message ContainerStatus {
  string name = 1;
  bool ready = 2;
  int32 restart_count = 3;
  string state = 4;          // waiting/running/terminated
  string image = 5;
}

message ListPodStatusResponse {
  repeated PodStatus pods = 1; // Pod 状态数组
  string chart_version = 2;  // Helm Chart 版本
}

// 7. 检查 ApisixRoute
message CheckApisixRouteRequest {
  string release_name = 1;
  string namespace = 2;     // 命名空间
}

message CheckApisixRouteResponse {
  bool exists = 1;
  string route_url = 2;     // 访问方式（如 http://apisix-gateway/route）
}

// 8. 创建 Chart 应用
message CreateChartApplicationRequest {
  string namespace = 1;
  string name = 2;
  string chart_ref = 3;     // Chart 引用（如 repo/chart）
  string values = 4;        // values.yaml 内容
}

message CreateChartApplicationResponse {
  bool success = 1;
}

// 9. 获取 Pod 日志
message GetPodLogsRequest {
  string namespace = 1;
  string pod_name = 2;
  int32 tail_lines = 3;     // 日志行数（可选）
  bool follow = 4;          // 是否实时流式传输（可选）
}

message LogChunk {
  bytes content = 1;        // 日志内容（二进制流）
}

// 10. 检查 Pod 终端
message CheckPodTerminalRequest {
  string namespace = 1;
  string pod_name = 2;
  string container = 3;     // 容器名称（可选）
}

message CheckPodTerminalResponse {
  bool supported = 1;       // 是否支持终端
  string websocket_url = 2; // WebSocket 连接地址（如 ws://service/terminal）
}

// 11. 上传文件
message UploadChartPackageRequest {
  oneof data {
    ChartMetadata metadata = 1;  // 首次请求发送元数据
    bytes chunk = 2;             // 后续请求发送文件分片
  }
}

message ChartMetadata {
  string chart_name = 1;      // Chart 名称（如 "nginx"）
  string chart_version = 2;   // Chart 版本（如 "1.2.3"）
  string repo_name = 3;       // 目标仓库名（如 "stable"）
  string content_type = 4;    // 文件类型（如 "application/x-tar"）
}

message UploadChartPackageResponse {
  string chart_url = 1;       // 上传后的 Chart 访问路径
  uint64 size_received = 2;   // 服务端实际接收的字节数
  string digest = 3;          // 文件摘要（如 SHA256）
}

// ========== 通用消息定义 ==========
message ChartSpec {
  string chart_name = 1;       // Chart 名称（如 "nginx"）
  string chart_version = 2;    // Chart 版本（如 "1.2.3"）
  string repo_url = 3;         // 仓库地址（可选）
  map<string, string> values = 4; // 自定义 Values
}

// ========== 升级请求/响应 ==========
message UpgradeChartRequest {
  string namespace = 1;
  string release_name = 2;
  ChartSpec chart = 3;
  bool force = 4;             // 是否强制升级（--force）
  bool recreate_pods = 5;     // 是否重启 Pod（--recreate-pods）
}

message UpgradeChartResponse {
  string status = 1;
  string revision = 2;       // 新版本号（如 "2"）
}

// ========== 回滚请求/响应 ==========
message RollbackChartRequest {
  string namespace = 1;
  string release_name = 2;
  string revision = 3;       // 目标回滚版本号（如 "1"）
  bool wait = 4;             // 是否等待回滚完成（--wait）
}

message RollbackChartResponse {
  string status = 1;
  string current_revision = 2; // 回滚后的版本号
}

// ========== 请求/响应定义 ==========
message ListChartVersionsRequest {
  string repo_name = 1;      // 仓库名称（如 "stable"）
  string chart_name = 2;     // Chart 名称（如 "nginx"）
  bool with_details = 3;     // 是否返回详细元数据（如更新时间）
}

message ChartVersionInfo {
  string version = 1;        // 版本号（如 "1.2.3"）
  string app_version = 2;    // 应用版本（如 "1.20.0"）
  string description = 3;    // 版本描述
  string created = 4;        // 创建时间（RFC3339 格式）
}

message ListChartVersionsResponse {
  repeated ChartVersionInfo versions = 1;
  string repo_url = 2;       // 仓库地址（如 "https://charts.helm.sh/stable"）
}

message ListInstalledChartsRequest {
  string namespace = 1;          // 目标命名空间（空表示所有命名空间）
  string release_name = 2;
  bool with_status = 3;          // 是否包含状态信息
  bool with_manifest = 4;        // 是否包含资源清单
}

message ListInstalledChartsResponse {
  int32 code = 1;
  string message = 2;
  bool success = 3;
  repeated google.protobuf.Any data = 4;
}

message InstalledChart {
  string name = 1;               // Release 名称
  string namespace = 2;          // 所属命名空间
  string chart_name = 3;         // Chart 名称（如 nginx）
  string chart_version = 4;      // Chart 版本（如 1.2.3）
  string app_version = 5;         // 应用版本
  string status = 6;              // 状态（DEPLOYED/FAILED/PENDING）
  string manifest = 7;
  google.protobuf.Timestamp updated = 8; // 最后更新时间
  map<string, string> values = 9; // 用户自定义 values
}
