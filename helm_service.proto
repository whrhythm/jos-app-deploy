syntax = "proto3";

package helm.v1alpha1;

import "google/api/annotations.proto";
// import "google/protobuf/empty.proto";
option go_package = "./pkg/pb/;pb";


service HelmManagerService {
  // 1. 获取私有仓库中所有 Helm Chart 信息
  rpc ListCharts (ListChartsRequest) returns (ListChartsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/charts"
    };
  }

  // 2. 设置私有仓库地址和权限
  rpc ConfigureRepo (ConfigureRepoRequest) returns (ConfigureRepoResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/repos"
      body: "*"
    };
  }

  // 3. 安装 Helm Chart
  rpc InstallChart (InstallChartRequest) returns (InstallChartResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{namespace}/charts/{name}/install"
      body: "*"
    };
  }

  // 4. 监控 Chart 安装状态
  rpc WatchInstallStatus (WatchInstallStatusRequest) returns (stream InstallStatus) {
    option (google.api.http) = {
      get: "/v1alpha1/{namespace}/charts/{name}/status"
    };
  }

  // 5. 监控 Chart 下 Pod 状态
  rpc WatchPodStatus (WatchPodStatusRequest) returns (stream PodStatus) {
    option (google.api.http) = {
      get: "/v1alpha1/{namespace}/charts/{name}/pods"
    };
  }

  // 6. 检查已安装 Chart 是否包含 ApisixRoute 资源
  rpc CheckApisixRoute (CheckApisixRouteRequest) returns (CheckApisixRouteResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/charts/{name}/apisix"
    };
  }

  // 7. 创建 Helm Chart 应用
  rpc CreateChartApplication (CreateChartApplicationRequest) returns (CreateChartApplicationResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/applications"
      body: "*"
    };
  }

  // 8. 获取 Pod 日志
  rpc GetPodLogs (GetPodLogsRequest) returns (stream LogChunk) {
    option (google.api.http) = {
      get: "/v1alpha1/pods/{namespace}/{pod_name}/logs"
    };
  }

  // 9. 检查 Pod 是否支持终端交互
  rpc CheckPodTerminal (CheckPodTerminalRequest) returns (CheckPodTerminalResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/pods/{namespace}/{pod_name}/terminal"
    };
  }
}

// ========== 请求/响应结构定义 ==========

// 1. 获取 Chart 列表
message ListChartsRequest {
  string repo_name = 1;  // 私有仓库名称（可选）
}

message ListChartsResponse {
  repeated ChartInfo charts = 1;
}

message ChartInfo {
  string name = 1;           // Chart 名称
  string chart_version = 2;  // Chart 版本
  string icon_url = 3;       // 图标 URL
  string app_version = 4;    // 应用版本
  string description = 5;    // 应用描述
  string updateDate = 6;     // 更新时间
  string updateUser = 7;     // 更新者
}

// 2. 配置私有仓库
message ConfigureRepoRequest {
  string name = 1;          // 仓库名称
  string url = 2;           // 仓库地址
  string username = 3;      // 用户名（可选）
  string password = 4;      // 密码（可选）
  string ca_file = 5;       // CA 证书（可选）
}

message ConfigureRepoResponse {
  bool success = 1;
}

// 3. 安装 Chart
message InstallChartRequest {
  string name = 1;          // Chart 名称
  string version = 2;       // Chart 版本
  string namespace = 3;     // 目标命名空间
  string values = 4;        // values.yaml 内容（JSON/YAML 字符串）
}

message InstallChartResponse {
  string release_name = 1;  // Helm Release 名称
}

// 4. 监控安装状态
message WatchInstallStatusRequest {
  string name = 1;          // Chart 名称
  string namespace = 2;     // 命名空间
}

message InstallStatus {
  string phase = 1;         // Installing | Deployed | Failed
  string message = 2;       // 状态详情
}

// 5. 监控 Pod 状态
message WatchPodStatusRequest {
  string name = 1;          // Chart 名称
  string namespace = 2;     // 命名空间
}

message PodStatus {
  string pod_name = 1;
  string status = 2;       // Running | Pending | Failed
  string message = 3;
}

// 6. 检查 ApisixRoute
message CheckApisixRouteRequest {
  string name = 1;          // Chart 名称
  string namespace = 2;     // 命名空间
}

message CheckApisixRouteResponse {
  bool exists = 1;
  string route_url = 2;     // 访问方式（如 http://apisix-gateway/route）
}

// 7. 创建 Chart 应用
message CreateChartApplicationRequest {
  string namespace = 1;
  string name = 2;
  string chart_ref = 3;     // Chart 引用（如 repo/chart）
  string values = 4;        // values.yaml 内容
}

message CreateChartApplicationResponse {
  bool success = 1;
}

// 8. 获取 Pod 日志
message GetPodLogsRequest {
  string namespace = 1;
  string pod_name = 2;
  int32 tail_lines = 3;     // 日志行数（可选）
  bool follow = 4;          // 是否实时流式传输（可选）
}

message LogChunk {
  bytes content = 1;        // 日志内容（二进制流）
}

// 9. 检查 Pod 终端
message CheckPodTerminalRequest {
  string namespace = 1;
  string pod_name = 2;
  string container = 3;     // 容器名称（可选）
}

message CheckPodTerminalResponse {
  bool supported = 1;       // 是否支持终端
  string websocket_url = 2; // WebSocket 连接地址（如 ws://service/terminal）
}

